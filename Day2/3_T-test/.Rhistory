}
extinction.sim(size = 16,
S = 2,
prop.occup = 0.25,
P.death = 0.01)
size = c(2, 4, 8, 16)
S = c(2,4,8,16,32,64, 128)
prop.occup = c(0.1, 0.25, 0.5, 0.75, 0.9)
P.death = c(0.01, 0.1, 0.3, 0.5, 0.7, 0.9, 0.99)
P.x = 0
P.ext = 0
# creating data frame with all possible combinations of the parameters,
# and with space for storing the simulation results
SIM <- expand.grid(size = size,
S = S,
prop.occup = prop.occup,
P.death = P.death,
P.ext = P.ext, # this will be overwritten during simulation
P.x = P.x) # this will be overwritten during simulation
nrow(SIM)
for(i in 1:nrow(SIM))
{
# print(i)
run.i <- extinction.sim(size = SIM$size[i],
S = SIM$S[i],
prop.occup = SIM$prop.occup[i],
P.death = SIM$P.death[i])
SIM[i, c("P.ext","P.x")] <- run.i
}
Pearson.cor <- round(cor(SIM$P.ext, SIM$P.x), 3)
plot(SIM$P.ext, SIM$P.x)
abline(a= 0, b= 1, col = "red")
graphics::text(x=0.8, y= 0.2, labels = paste("r = ", Pearson.cor))
library(mgcv)
?predict.gam
install.packages("Rtools")
install.packages("devtools")
library(mgcv)
?s
source("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model/class1.r")
setwd("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model")
setwd("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/3_T-test")
falcon <- read.csv("https://raw.githubusercontent.com/petrkeil/ML_and_Bayes_2021_CZU/main/08_T-test/falcon.csv")
falcon
summary(falcon)
boxplot(wingspan ~ male, data=falcon,
names=c("Female", "Male"),
ylab="Wingspan [cm]",
col="grey")
x <- falcon$wingspan[falcon$male==1]
y <- falcon$wingspan[falcon$male==0]
t.test(x, y)
lm1 <- lm(wingspan ~ male, data=falcon)
summary(lm1)
y.male <- falcon$wingspan[falcon$male==1]
y.female <- falcon$wingspan[falcon$male==0]
falcon.data.1 <- list(y.f=y.female,
N.f=60,
y.m=y.male,
N.m=40)
falcon.data.1
source("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model/class1.r")
source("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model/class1.r")
cat("
model
{
# prior
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
log(sigma) ~ dnorm(0, 0.001)
tau <- 1/(sigma*sigma)
# likelihood
for(i in 1:N.m)
{
y.m[i] ~ dnorm(mu.m, tau)
}
for(j in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
}
", file="t-test.bug")
falcon.data.1 <- list(y.f=y.female,
N.f=60,
y.m=y.male,
N.m=40)
cat("
model
{
# prior
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
log(sigma) ~ dnorm(0, 0.001)
tau <- 1/(sigma*sigma)
# likelihood
for(i in 1:N.m)
{
y.m[i] ~ dnorm(mu.m, tau)
}
for(j in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(R2jags)
cat("
model
{
# prior
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
log(sigma) ~ dnorm(0, 0.001)
tau <- 1/(sigma*sigma)
# likelihood
for(i in 1:N.m)
{
y.m[i] ~ dnorm(mu.m, tau)
}
for(j in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
cat("
model
{
# prior
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
log(sigma) ~ dnorm(0, 0.001)
tau <- 1/(sigma*sigma)
# likelihood
for(i in 1:N.m)
{
y.m[i] ~ dnorm(mu.m, tau)
}
for(j in 1:N.f)
{
y.f[j] ~ dnorm(mu.f, tau)
}
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
falcon.data.1 <- list(y.f=y.female,
N.f=60,
y.m=y.male,
N.m=40)
cat("
cat("
model
{
# prior
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
log(sigma) ~ dnorm(0, 0.001)
tau <- 1/(sigma*sigma)
# likelihood
for(i in 1:N.m)
{
y.m[i] ~ dnorm(mu.m, tau)
}
for(j in 1:N.f)
{
y.f[j] ~ dnorm(mu.f, tau)
}
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
falcon.data.1
cat("
model
{
# priors
mu.f ~ dnorm(0, 0.001)
mu.m ~ dnorm(0, 0.001)
tau <- 1/(sigma*sigma)   ## Note: tau = 'precision' = 1/variance
sigma ~ dunif(0,100)
# likelihood - Females
for(i in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
# likelihood - Males
for(j in 1:N.m)
{
y.m[j] ~ dnorm(mu.m, tau)
}
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
N.m=40)
N.m=40)
cat("
model
{
# priors
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
tau <- 1/(sigma*sigma)   ## Note: tau = 'precision' = 1/variance
sigma ~ dunif(0,100)
# likelihood - Females
for(i in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
# likelihood - Males
for(j in 1:N.m)
{
y.m[j] ~ dnorm(mu.m, tau)
}
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
cat("
model
{
# priors
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
tau <- 1/(sigma*sigma)   ## Note: tau = 'precision' = 1/variance
log(sigma) ~ dnorm(0,0.001)
# likelihood - Females
for(i in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
# likelihood - Males
for(j in 1:N.m)
{
y.m[j] ~ dnorm(mu.m, tau)
}
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
cat("
model
{
# priors
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
tau <- 1/(sigma*sigma)   ## Note: tau = 'precision' = 1/variance
sigma ~ dunif(0,100)
# likelihood - Females
for(i in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
# likelihood - Males
for(j in 1:N.m)
{
y.m[j] ~ dnorm(mu.m, tau)
}
}
", file="t-test.bug")
model.fit
plot(as.mcmc(model.fit))
plot(as.mcmc(model.fit))
cat("
model
{
# priors
mu.f ~ dunif(0, 1000)
mu.m ~ dunif(0, 1000)
tau <- 1/(sigma*sigma)   ## Note: tau = 'precision' = 1/variance
sigma ~ dunif(0,100)
# likelihood - Females
for(i in 1:N.f)
{
y.f[i] ~ dnorm(mu.f, tau)
}
# likelihood - Males
for(j in 1:N.m)
{
y.m[j] ~ dnorm(mu.m, tau)
}
# derived quantity
delta <- mu.f - mu.m
}
", file="t-test.bug")
model.fit <- jags(data=falcon.data.1,
model.file="t-test.bug",
parameters.to.save=c("mu.f", "mu.m", "sigma", "delta"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
model.fit
plot(as.mcmc(model.fit))
snakes <- read.csv("https://raw.githubusercontent.com/petrkeil/ML_and_Bayes_2021_CZU/main/09_ANOVA/snakes.csv")
summary(snakes)
par(mfrow=c(1,2))
plot(snout.vent ~ population, data=snakes,
ylab="Snout-vent length [cm]")
boxplot(snout.vent ~ population, data=snakes,
ylab="Snout-vent length [cm]",
xlab="population",
col="grey")
snake.data <- list(y=snakes$snout.vent,
x=snakes$population,
N=nrow(snakes),
N.pop=5)
snake.data
model
snake.data <- list(y=snakes$snout.vent,
x=snakes$population,
N=nrow(snakes),
N.pop=5)
cat("
model
{
# priors
sigma ~ dunif(0,100)
tau <- 1/(sigma*sigma)
for(j in 1:N.pop)
{
alpha[j] ~ dnorm(0, 0.001)
}
# likelihood
for(i in 1:N)
{
y[i] ~ dnorm(alpha[x[i]], tau)
}
}
", file = "anova.txt")
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("alpha"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(mcmcplots)
install.packages("mcmcplots")
library(mcmcplots)
caterplot(model.fit.fix)
caterplot(model.fit.fix)
cat("
model
{
# priors
sigma ~ dunif(0,100)
tau <- 1/(sigma*sigma)
for(j in 1:N.pop)
{
alpha[j] ~ dnorm(0, 0.001)
}
# likelihood
for(i in 1:N)
{
y[i] ~ dnorm(alpha[x[i]], tau)
}
# derived quantity
delta12 <- alpha[1] - alpha[2]
}
", file = "anova.txt")
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("alpha", "delta12"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(mcmcplots)
caterplot(model.fit.fix)
source("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model/class1.r")
cat("
model
{
# priors
grand.mean ~ dnorm(0, 0.001)
grand.sigma ~ dunif(0,100)
grand.tau <- 1/pow(grand.sigma)
sigma ~ dunif(0,100)
tau <- 1/(sigma*sigma)
for(j in 1:N.pop)
{
alpha[j] ~ dnorm(grand.mean, grand.tau)
}
# likelihood
for(i in 1:N)
{
y[i] ~ dnorm(alpha[x[i]], tau)
}
}
", file = "anova.txt")
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("alpha", "grand.mean"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
cat("
model
{
# priors
grand.mean ~ dnorm(0, 0.001)
grand.sigma ~ dunif(0,100)
grand.tau <- 1/(grand.sigma*grand.sigma)
sigma ~ dunif(0,100)
tau <- 1/(sigma*sigma)
for(j in 1:N.pop)
{
alpha[j] ~ dnorm(grand.mean, grand.tau)
}
# likelihood
for(i in 1:N)
{
y[i] ~ dnorm(alpha[x[i]], tau)
}
}
", file = "anova.txt")
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("alpha", "grand.mean"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(mcmcplots)
caterplot(model.fit.fix)
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("alpha", "grand.mean", "tau"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(mcmcplots)
caterplot(model.fit.fix)
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("alpha", "grand.mean",
"tau", "group.tau"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("alpha", "grand.mean",
"tau", "grand.tau"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(mcmcplots)
caterplot(model.fit.fix)
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("tau", "grand.tau"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(mcmcplots)
caterplot(model.fit.fix)
model.fit.fix <- jags(data=snake.data,
model.file="anova.txt",
parameters.to.save=c("sigma", "grand.sigma"),
n.chains=3,
n.iter=2000,
n.burnin=1000,
DIC=FALSE)
library(mcmcplots)
caterplot(model.fit.fix)
