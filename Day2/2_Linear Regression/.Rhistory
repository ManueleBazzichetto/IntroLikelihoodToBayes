a <- round(rlnormTrunc(n=2, meanlog=64, sdlog=10, min=1, max = 256))
mean(a)
a <- round(rlnormTrunc(n=2, meanlog=4, sdlog=10, min=1, max = 256))
mean(a)
# convert proportional occupancy to # of occupied grid cells
occup <- round(size*size*prop.occup)
prop.occup = 1
prop.occup = 0.5
# convert proportional occupancy to # of occupied grid cells
occup <- round(size*size*prop.occup)
prop.occup
# convert proportional occupancy to # of occupied grid cells
occup <- round(size*size*prop.occup)
occup
# convert proportional occupancy to # of occupied grid cells
occup <- round(size*size*prop.occup)
occup
# convert proportional occupancy to # of occupied grid cells
meanlog.occup <- round(size*size*prop.occup)
# distribution of occupancies (range sizes)
occups <- sort(round(rlnormTrunc(n=S,
meanlog=meanlog.occup,
sdlog=10,
min=1, max = size*size)))
occups
extinction.sim <- function(size, S, prop.occup, P.death)
{
# empty boxes for stuff
M1 <- list()
M2 <- list()
M.ext <- list()
P.ext <- list()
P.x <- list()
# convert proportional occupancy to # of occupied grid cells
meanlog.occup <- round(size*size*prop.occup)
# distribution of occupancies (range sizes) for each species
occups <- sort(round(rlnormTrunc(n=S,
meanlog=meanlog.occup,
sdlog=10,
min=1, max = size*size)))
# for each species in the set
for(i in 1:S)
{
# create empty matrix of absences (zeroes) at time 1
M1[[i]] <- matrix(0, nrow=size, ncol=size)
# insert presences at random locations
pres.locations <- sample(1:(size*size),
occups[i],
replace = FALSE)
M1[[i]][pres.locations] <- 1
# transfer the matrix to time 2
M2[[i]] <- M1[[i]]
# subjet M2 to random deaths per individual with probability P.death
M2[[i]] <- M2[[i]][] * rbinom(size*size, size = 1, prob = 1 - P.death)
# number of cells with an extinction event
N.ext <- sum(M2[[i]] - M1[[i]] == -1)
# P.ext for the i-th species
P.ext[i] <- N.ext / occups[i]
# matrix of extinction events (1s)
M.ext[[i]] <- (M2[[i]] -  M1[[i]] == -1)*1
}
# the main P.ext that will be in the results (mean across all species)
P.ext <- mean(unlist(P.ext))
# calculation of P.x
# --- get total number of extinctions per grid cell
ext.per.cell <- Reduce("+", M.ext)
# --- get total number of species per grid cell at time 1
S.per.cell <- Reduce("+", M1)
# --- identities of grid cells with S>0 at time 1
posit.S <- S.per.cell > 0
# --- the main P.x that will be in the results
P.x <- mean(ext.per.cell[posit.S] / S.per.cell[posit.S])
return(c(P.ext = P.ext, P.x = P.x))
}
extinction.sim(size = 16,
S = 2,
prop.occup = 0.25,
P.death = 0.01)
size = c(2, 4, 8, 16)
S = c(2,4,8,16,32,64, 128)
prop.occup = c(0.1, 0.25, 0.5, 0.75, 0.9)
P.death = c(0.01, 0.1, 0.3, 0.5, 0.7, 0.9, 0.99)
P.x = 0
P.ext = 0
# creating data frame with all possible combinations of the parameters,
# and with space for storing the simulation results
SIM <- expand.grid(size = size,
S = S,
prop.occup = prop.occup,
P.death = P.death,
P.ext = P.ext, # this will be overwritten during simulation
P.x = P.x) # this will be overwritten during simulation
for(i in 1:nrow(SIM))
{
# print(i)
run.i <- extinction.sim(size = SIM$size[i],
S = SIM$S[i],
prop.occup = SIM$prop.occup[i],
P.death = SIM$P.death[i])
SIM[i, c("P.ext","P.x")] <- run.i
}
plot(SIM$P.ext, SIM$P.x)
abline(a= 0, b= 1, col = "red")
cor(SIM$P.ext, SIM$P.x)
?text
graphics::text(x=0.8, y= 0.2, labels = "ahoj")
graphics::text(x=0.8, y= 0.2, labels = paste("r = ", correl))
correl <- cor(SIM$P.ext, SIM$P.x)
Pearson.cor <- cor(SIM$P.ext, SIM$P.x)
plot(SIM$P.ext, SIM$P.x)
abline(a= 0, b= 1, col = "red")
graphics::text(x=0.8, y= 0.2, labels = paste("r = ", Pearson.cor))
Pearson.cor <- round(cor(SIM$P.ext, SIM$P.x), 3)
plot(SIM$P.ext, SIM$P.x)
abline(a= 0, b= 1, col = "red")
graphics::text(x=0.8, y= 0.2, labels = paste("r = ", Pearson.cor))
extinction.sim <- function(size, S, prop.occup, P.death)
{
# empty boxes for stuff
M1 <- list()
M2 <- list()
M.ext <- list()
P.ext <- list()
P.x <- list()
# convert proportional occupancy to # of occupied grid cells
meanlog.occup <- round(size*size*prop.occup)
# distribution of occupancies (range sizes) for each species
occups <- sort(round(rlnormTrunc(n=S,
meanlog=meanlog.occup,
sdlog=10,
min=1, max = size*size)))
# for each species in the set
for(i in 1:S)
{
# create empty matrix of absences (zeroes) at time 1
M1[[i]] <- matrix(0, nrow=size, ncol=size)
# insert presences at random locations
pres.locations <- sample(1:(size*size),
occups[i],
replace = FALSE)
M1[[i]][pres.locations] <- 1
# transfer the matrix to time 2
M2[[i]] <- M1[[i]]
# subjet M2 to random deaths per individual with probability P.death
M2[[i]] <- M2[[i]][] * rbinom(size*size, size = 1, prob = 1 - P.death)
# number of cells with an extinction event
N.ext <- sum(M2[[i]] - M1[[i]] == -1)
# P.ext for the i-th species
P.ext[i] <- N.ext / occups[i]
# matrix of extinction events (1s)
M.ext[[i]] <- (M2[[i]] -  M1[[i]] == -1)*1
}
# the main P.ext that will be in the results (mean across all species)
P.ext <- mean(unlist(P.ext))
# calculation of P.x
# --- get total number of extinctions per grid cell
ext.per.cell <- Reduce("+", M.ext)
# --- get total number of species per grid cell at time 1
S.per.cell <- Reduce("+", M1)
# --- identities of grid cells with S>0 at time 1
posit.S <- S.per.cell > 0
# --- the main P.x that will be in the results
P.x <- mean(ext.per.cell[posit.S] / S.per.cell[posit.S])
return(c(P.ext = P.ext, P.x = P.x))
}
extinction.sim(size = 16,
S = 2,
prop.occup = 0.25,
P.death = 0.01)
size = c(2, 4, 8, 16)
S = c(2,4,8,16,32,64, 128)
prop.occup = c(0.1, 0.25, 0.5, 0.75, 0.9)
P.death = c(0.01, 0.1, 0.3, 0.5, 0.7, 0.9, 0.99)
P.x = 0
P.ext = 0
# creating data frame with all possible combinations of the parameters,
# and with space for storing the simulation results
SIM <- expand.grid(size = size,
S = S,
prop.occup = prop.occup,
P.death = P.death,
P.ext = P.ext, # this will be overwritten during simulation
P.x = P.x) # this will be overwritten during simulation
nrow(SIM)
for(i in 1:nrow(SIM))
{
# print(i)
run.i <- extinction.sim(size = SIM$size[i],
S = SIM$S[i],
prop.occup = SIM$prop.occup[i],
P.death = SIM$P.death[i])
SIM[i, c("P.ext","P.x")] <- run.i
}
Pearson.cor <- round(cor(SIM$P.ext, SIM$P.x), 3)
plot(SIM$P.ext, SIM$P.x)
abline(a= 0, b= 1, col = "red")
graphics::text(x=0.8, y= 0.2, labels = paste("r = ", Pearson.cor))
library(mgcv)
?predict.gam
install.packages("Rtools")
install.packages("devtools")
library(mgcv)
?s
y <- c(23,17,25,28,38,18,32,51,
32,41,51,33,21,52,11,19)
N <- length(y)
N
hist(y)
my.data <- list(y=y, N=N)
my.data
cat("
model
{
# prior
lambda ~ dunif(0, 1000)
# likelihood
for(i in 1:N)
{
y[i] ~ dpois(lambda)
}
}
", file = "my_first_model.txt")
cat("
model
{
# prior
lambda ~ dunif(0, 1000)
# likelihood
for(i in 1:N)
{
y[i] ~ dpois(lambda)
}
}
", file = "my_first_model.txt")
cat("
model
{
# prior
lambda ~ dunif(0, 1000)
# likelihood
for(i in 1:N)
{
y[i] ~ dpois(lambda)
}
}
", file = "my_first_model.txt")
setwd("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model")
cat("
model
{
# prior
lambda ~ dunif(0, 1000)
# likelihood
for(i in 1:N)
{
y[i] ~ dpois(lambda)
}
}
", file = "my_first_model.txt")
fitted.model <- jags(data=my.data,
model.file="my_first_model.txt",
parameters.to.save="lambda",
n.chains=3,
n.iter=2000,
n.burnin=1000)
library("R2jags")
fitted.model <- jags(data=my.data,
model.file="my_first_model.txt",
parameters.to.save="lambda",
n.chains=3,
n.iter=2000,
n.burnin=1000)
fitted.model <- jags(data=my.data,
model.file="my_first_model.txt",
parameters.to.save="lambda",
n.chains=3,
n.iter=200000,
n.burnin=1000)
fitted.model <- jags(data=my.data,
model.file="my_first_model.txt",
parameters.to.save="lambda",
n.chains=3,
n.iter=200000,
n.burnin=1000)
fitted.model
as.mcmc(fitted.model)
plot(as.mcmc(fitted.model))
plot(as.mcmc(fitted.model))
catepil <- read.csv("https://rawgit.com/petrkeil/ML_and_Bayes_2017_iDiv/master/Linear%20Regression/catepilar_data.csv")
catepil
plot(growth ~ tanin, data = catepil)
plot(growth ~ tannin, data = catepil)
plot(growth ~ tannin, data = catepil)
lm(growth ~ tannin, data = catepil)
glm(growth ~ tannin, data = catepil)
m1 <- lm(growth ~ tannin, data = catepil)
summary(m1)
library(brms)
install.packages("brms")
library(brms)
brm(growth ~ tannin, data = catepil, family="gaussian")
m.stan <- brm(growth ~ tannin, data = catepil, family="gaussian")
summary(m.stan)
plot(as.mcmc(m.stan))
plot(as.mcmc(m.stan))
plot(m.stan)
linreg.data <- list(N=9,
tannin=catepil$tannin,
growth=catepil$growth)
linreg.data
cat("
model
{
# likelihood
for(i in 1:N)
{
growth[i] ~ dnorm(mu[i], tau)
mu[i] <- a + b*tannin[i]
}
# priors
a ~ dnorm(0, 0.001)
b ~ dnorm(0, 0.001)
sigma ~ dunif(0, 100)
tau <- 1/(sigma*sigma)
}
", file = "linreg_model.txt")
setwd("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model")
cat("
model
{
# likelihood
for(i in 1:N)
{
growth[i] ~ dnorm(mu[i], tau)
mu[i] <- a + b*tannin[i]
}
# priors
a ~ dnorm(0, 0.001)
b ~ dnorm(0, 0.001)
sigma ~ dunif(0, 100)
tau <- 1/(sigma*sigma)
}
", file = "linreg_model.txt")
setwd("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/1_Simplest JAGS model")
setwd("C:/Users/keil/Dropbox/GitHub/IntroLikelihoodToBayes/Day2/2_Linear Regression")
cat("
model
{
# likelihood
for(i in 1:N)
{
growth[i] ~ dnorm(mu[i], tau)
mu[i] <- a + b*tannin[i]
}
# priors
a ~ dnorm(0, 0.001)
b ~ dnorm(0, 0.001)
sigma ~ dunif(0, 100)
tau <- 1/(sigma*sigma)
}
", file = "linreg_model.txt")
jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("a", "b", "sigma", "tau", "mu"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=2000)
jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("a", "b", "sigma", "tau", "mu"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=200000)
?jags
jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("a", "b", "sigma", "tau", "mu"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=2000)
fitted.m <- jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("a", "b", "sigma", "tau", "mu"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=2000)
fitted.m
fitted.m <- jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("a", "b"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=2000)
fitted.m
catepil
group=c("A","B", "A", "B", "A", "B", "A", "B", "A")
catepil
catepil <- data.frame(catepil,
catepil <- data.frame(catepil,
group=c("A","B", "A", "B", "A", "B", "A", "B", "A"))
catepil
model.matrix(growth ~ tannin + group, data = catepil)
MAT <- model.matrix(growth ~ tannin + group, data = catepil)
growth ~ tannin + group, data = catepil
MAT <- model.matrix(growth ~ tannin + group, data = catepil)
MAT
MAT <- model.matrix(growth ~ tannin + group, data = catepil)
MAT
MAT <- model.matrix(growth ~ poly(tannin, 2) + group, data = catepil)
MAT
MAT <- model.matrix(growth ~ tannin + group + tannin:group,
data = catepil)
MAT
linreg.data <- list(N=9,
MAT = MAT)
linreg.data
linreg.data <- list(N=9,
MAT = as.matrix(MAT))
linreg.data
linreg.data <- list(N=9,
MAT = as.matrix(MAT))
linreg.data
cat("
model
{
# priors
sigma ~ dunif(0, 100)
tau <- 1/(sigma*sigma)
for(j in 1:4)
{
b[j] ~ dnorm(0, 0.001)
}
# likelihood
for(i in 1:N)
{
growth[i] ~ dnorm(mu[i], tau)
mu[i] <- MAT %*% b
}
}
", file = "linreg_model.txt")
fitted.m <- jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("a", "b""sigma", "tau", "mu"),
fitted.m <- jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("b"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=2000)
cat("
model
{
# priors
sigma ~ dunif(0, 100)
tau <- 1/(sigma*sigma)
for(j in 1:4)
{
b[j] ~ dnorm(0, 0.001)
}
# likelihood
mu <- MAT %*% b
for(i in 1:N)
{
growth[i] ~ dnorm(mu[i], tau)
}
}
", file = "linreg_model.txt")
fitted.m <- jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("b"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=2000)
ncol(MAT)
linreg.data <- list(N=9,
growth = catepil$growth,
group = catepil$group)
linreg.data
linreg.data <- list(N=9,
growth = catepil$growth,
group = catepil$group)
linreg.data
cat("
model
{
# priors
sigma ~ dunif(0, 100)
tau <- 1/(sigma*sigma)
a ~ dnorm(0, 0.001)
b ~ dnorm(0, 0.001)
# likelihood
for(i in 1:N)
{
growth[i] ~ dnorm(mu[i], tau)
mu[i] <- a + b[group[i]]
}
}
", file = "linreg_model.txt")
fitted.m <- jags(data=linreg.data,
model.file="linreg_model.txt",
parameters.to.save=c("b"),
n.chains=3,
n.burnin=1000,
n.thin = 1,
n.iter=2000)
